/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "transwarp/release-config/pkg/apis/transwarp/v1beta1"
)

// ReleaseConfigLister helps list ReleaseConfigs.
type ReleaseConfigLister interface {
	// List lists all ReleaseConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ReleaseConfig, err error)
	// ReleaseConfigs returns an object that can list and get ReleaseConfigs.
	ReleaseConfigs(namespace string) ReleaseConfigNamespaceLister
	ReleaseConfigListerExpansion
}

// releaseConfigLister implements the ReleaseConfigLister interface.
type releaseConfigLister struct {
	indexer cache.Indexer
}

// NewReleaseConfigLister returns a new ReleaseConfigLister.
func NewReleaseConfigLister(indexer cache.Indexer) ReleaseConfigLister {
	return &releaseConfigLister{indexer: indexer}
}

// List lists all ReleaseConfigs in the indexer.
func (s *releaseConfigLister) List(selector labels.Selector) (ret []*v1beta1.ReleaseConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ReleaseConfig))
	})
	return ret, err
}

// ReleaseConfigs returns an object that can list and get ReleaseConfigs.
func (s *releaseConfigLister) ReleaseConfigs(namespace string) ReleaseConfigNamespaceLister {
	return releaseConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReleaseConfigNamespaceLister helps list and get ReleaseConfigs.
type ReleaseConfigNamespaceLister interface {
	// List lists all ReleaseConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ReleaseConfig, err error)
	// Get retrieves the ReleaseConfig from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ReleaseConfig, error)
	ReleaseConfigNamespaceListerExpansion
}

// releaseConfigNamespaceLister implements the ReleaseConfigNamespaceLister
// interface.
type releaseConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReleaseConfigs in the indexer for a given namespace.
func (s releaseConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ReleaseConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ReleaseConfig))
	})
	return ret, err
}

// Get retrieves the ReleaseConfig from the indexer for a given namespace and name.
func (s releaseConfigNamespaceLister) Get(name string) (*v1beta1.ReleaseConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("releaseconfig"), name)
	}
	return obj.(*v1beta1.ReleaseConfig), nil
}
